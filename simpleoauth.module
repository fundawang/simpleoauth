<?php

/*
 * This file is licensed under GPLv2+.
*/

/**
 * @file
 * Provides simple oauth implementation on pure server side.
 */

/**
 * Implementation of hook_help().
 */
function simpleoauth_help($path, $arg) {
	switch ($path) {
		case 'admin/config/services/simpleoauth':
			$output = t('In this page, you could configure 3rd-party website access via simple oauth.');
			break;
		default: return;
	}
	return $output;
}

/**
 * Implementation of hook_menu().
 */
function simpleoauth_menu() {
	$items['admin/config/services/simpleoauth'] = array(
		'title' => 'Simple OAuth settings',
		'description' => 'Simple OAuth 3rd-party access settings.',
		'access arguments' => array('access administration pages'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('simpleoauth_admin_form'),
	);
	$items['simpleoauth'] = array(
		'access callback' => 'simpleoauth_callback_access',
		'type' => MENU_CALLBACK,
		'page callback' => 'simpleoauth_callback',
	);
	return $items;
}

function simpleoauth_admin_form($form, $form_state) {
	$form=array(
		'#submit' => array('simpleoauth_admin_form_submit'),
		'#validate' => array('simpleoauth_admin_form_validate'),
	);
	$header=array(
		'appid' => array('data' => t('App ID')),
		'secret' => array('data' => t('App Secret')),
		'name' => array('data' => t('App Name')),
	);
	$options=array();
	$result=db_query('SELECT * FROM {simpleoauth} ORDER BY appid');
	foreach($result as $r) {
		$options[$r->appid]=array(
			'appid' => sprintf('<code>%s</code>',$r->appid),
			'secret' => sprintf('<code>%s</code>',$r->appkey),
			'name' => $r->appname,
		);
	}
	if(!empty($options)) {
		$form['info']=array(
			'#type' => 'item',
			'#title' => t('Existing Apps to delete'),
			'#description' => t('If you want to delete some of apps, please select them.'),
		);
		$form['existsinapps']=array(
			'#type' => 'tableselect',
			'#header' => $header,
			'#options' => $options,
			'#empty' => t('No existing apps'),
		);
	}

	$form['addprefix']=array(
		'#type' => 'markup',
		'#markup' => '<div class="container-inline"><br/>',
	);
	$form['selecttoadd']=array(
		'#type' => 'checkbox',
		'#title' => empty($options)?t('Select to add your first 3rd-party app,'):t('Select to add another app,'),
	);
	
	$form['appname']=array(
		'#type' => 'textfield',
		'#title' => t('in the name of'),
		'#maxlength' => 30,
		'#size' => 20,
		'#states' => array(
			'visible' => array(':input[name="selecttoadd"]' => array('checked' => TRUE)),
			'required' => array(':input[name="selecttoadd"]' => array('checked' => TRUE)),
		),
	);
	$form['addsuffix']=array(
		'#type' => 'markup',
		'#markup' => '</div>',
	);
	return system_settings_form($form);
}
function simpleoauth_admin_form_validate($form, $form_state) {
	$appname=trim($form_state['values']['appname']);
	if($form_state['values']['selecttoadd']==1 && empty($appname))
		form_set_error('appname', t('!name field is required.',array('!name' => t('App Name'))));
}

function simpleoauth_admin_form_submit($form, $form_state) { 
	$appstodelete=array_values($form_state['values']['existsinapps']);
	foreach($appstodelete as $app) {
		db_delete('simpleoauth')->condition('appid',$app)->execute();
	}
	if($form_state['values']['selecttoadd']==1) {
		$appid=variable_get('zhaoban_current_year',date('Y')).bin2hex(openssl_random_pseudo_bytes(7));
		$appkey=bin2hex(openssl_random_pseudo_bytes(4));
		$appname=trim($form_state['values']['appname']);
		db_insert('simpleoauth')->fields(array(
			'appid' => $appid,
			'appkey' => $appkey,
			'appname' => $appname,
			'token' => bin2hex(openssl_random_pseudo_bytes(8)),
			'expire_time' => time()+1800,
		))->execute();
	}
}

function _simpleoauth_sign($input, $sign=NULL) {
	sort($input);
	$md5sum=md5(implode('',$input));
	if(empty($sign)) return $md5sum;
	else return $sign==$md5sum;
}

function simpleoauth_callback_access() {
	$GET=$_GET;
	unset($GET['q']);
	unset($GET['sign']);
	unset($GET['op']);
	if($_SERVER['REQUEST_METHOD']=='POST' || empty($GET) || empty($_GET['sign']) || empty($_GET['op'])) return FALSE;
	if(empty($GET['access_token']) && $_GET['op']=='grant_access') {
		// When accessing access_grant interface, appid is must have.
		if(empty($GET['appid'])) return FALSE;
		$appkey=db_query('SELECT appkey FROM {simpleoauth} WHERE appid=:appid',array(':appid'=>$GET['appid']))->fetchField();
		if(empty($appkey)) return FALSE;
		$GET['key']=$appkey;
		return _simpleoauth_sign($GET, $_GET['sign']);
	} else {
		// else access_token is must have.
		if(empty($GET['access_token'])) return FALSE;
		$appkey=db_query('SELECT appkey FROM {simpleoauth} WHERE token=:token',array(':token'=>$GET['access_token']))->fetchField();
		if(empty($appkey)) return FALSE;
		$GET['key']=$appkey;
		return _simpleoauth_sign($GET, $_GET['sign']);
	}
}

function simpleoauth_callback() {
	$output=array();
	if($_GET['op']=='grant_access') {
		$appid=$_GET['appid'];
		$r=db_query('SELECT token, expire_time FROM {simpleoauth} WHERE appid=:appid AND expire_time>:expire_time',
			array(':appid'=>$appid, ':expire_time'=>time()))->fetchAssoc();
		if(empty($r)) {
			$r=array('token'=>bin2hex(openssl_random_pseudo_bytes(8)), 'expire_time'=>time()+1800);
			db_update('simpleoauth')->condition('appid',$appid)->fields(array(
				'token' => $r['token'],
				'expire_time' => $r['expire_time'],
			))->execute();
		}
		$output=array(
			'status' => '0',
			'access_token' => $r['token'],
			'expire_time' => $r['expire_time']
		);
	} else {
		$app=db_query('SELECT appid, expire_time FROM {simpleoauth} WHERE token=:token', array(':token'=>$_GET['access_token']))->fetchObject();
		if($app->expire_time < time()) {
			$output = array(
				'status' => '42001',
				'errmsg' => t('Access Token expired.')
			);
		} else if(module_hook($_GET['op'],'simpleoauth')) {
			$GET=$_GET;
			unset($GET['q']);
			unset($GET['sign']);
			unset($GET['op']);
			$output=module_invoke($_GET['op'], 'simpleoauth', $GET, $app->appid);
		}
		else {
			$output=array(
				'status' => '40001',
				'errmsg' => t('Invalid operation.'),
			);
		}
	}
	$output['key']=db_query('SELECT appkey FROM {simpleoauth} WHERE appid=:appid', array(':appid'=>$app->appid))->fetchField();
	$output['sign']=_simpleoauth_sign($output);
	
	unset($output['key']);
	drupal_add_http_header('Content-Type', 'application/json; charset=utf-8');
	
	$code=drupal_json_encode($output);
	if( version_compare(phpversion(), '5.4.0') < 0 ) {
		$code=json_encode($output);
		$code=preg_replace_callback('/\\\\u([0-9a-f]{4})/i', function($matches) { return mb_convert_encoding(pack('H*', $matches[1]), 'UTF-8', 'UTF-16'); }, $code); 
	} else
		$code=json_encode($output, JSON_UNESCAPED_UNICODE);
	echo $code;
	exit;
}

function simpleoauth_get_appname($appid) {
	$appname=db_query('SELECT appname FROM {simpleoauth} WHERE appid=:appid', array(':appid'=>$app->appid))->fetchField();
	if(empty($appname)) return FALSE;
	else return $appname;
}

function simpleoauth_cron() {
	db_update('simpleoauth')->condition('expire_time',time(),'>')->fields(array(
		'token' => bin2hex(openssl_random_pseudo_bytes(8)),
		'expire_time' => time()+1800,
	))->execute();
}

?>
